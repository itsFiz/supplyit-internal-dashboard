// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enhanced User model with RBAC
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(TEAM)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Custom relations
  createdBy   User?   @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById String?
  createdUsers User[] @relation("UserCreatedBy")

  updatedBudgetCategories BudgetCategory[] @relation("BudgetCategoryUpdatedBy")
  updatedMilestones      Milestone[]      @relation("MilestoneUpdatedBy")
  updatedTeamMembers     TeamMember[]     @relation("TeamMemberUpdatedBy")
  updatedKPIs            KPI[]            @relation("KPIUpdatedBy")
  auditLogs              AuditLog[]       @relation("AuditLogUser")

  @@map("users")
}

model BudgetCategory {
  id           Int      @id @default(autoincrement())
  category     String
  estimatedCost Decimal  @db.Decimal(10, 2)
  actualCost   Decimal  @default(0) @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  updatedBy    User?    @relation("BudgetCategoryUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?

  @@map("budget_categories")
}

model Milestone {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  targetDate  DateTime  @db.Date
  status      MilestoneStatus @default(PENDING)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  updatedBy   User?     @relation("MilestoneUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  @@map("milestones")
}

model TeamMember {
  id           Int      @id @default(autoincrement())
  role         String
  name         String?
  involvement  String
  monthlyCost  Decimal  @default(0) @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  updatedBy    User?    @relation("TeamMemberUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?

  @@map("team_members")
}

model KPI {
  id         Int      @id @default(autoincrement())
  name       String
  value      Decimal  @db.Decimal(10, 2)
  targetValue Decimal? @db.Decimal(10, 2)
  unit       String?
  date       DateTime @default(now()) @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedBy  User?    @relation("KPIUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  @@map("kpis")
}

// Audit Log for tracking changes
model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String   // CREATE, READ, UPDATE, DELETE
  table     String   // Which table was affected
  recordId  String   // ID of the affected record
  oldValues Json?    // Previous values
  newValues Json?    // New values
  userId    String   // Who made the change
  user      User     @relation("AuditLogUser", fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum Role {
  FOUNDER
  SUPER_ADMIN
  FINANCE_CONTROLLER
  PRODUCT_OWNER
  OPS_MANAGER
  TECH_LEAD
  STRATEGY_LEAD
  SALES_LEAD
  INVESTOR
  PILOT_CLIENT
  ADVISOR
  TEAM
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
